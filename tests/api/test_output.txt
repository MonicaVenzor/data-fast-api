============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-8.3.4, pluggy-1.5.0 -- /root/.pyenv/versions/3.10.6/envs/taxifare-env/bin/python
cachedir: .pytest_cache
rootdir: /root/code/MonicaVenzor/07-ML-Ops/04-Predict-in-production/data-fast-api/tests
configfile: pytest_kitt.ini
plugins: time-machine-2.16.0, asyncio-0.24.0, anyio-3.7.1
asyncio: mode=strict, default_loop_scope=None
collecting ... collected 18 items

tests/api/test_cloud_endpoints.py::test_root_is_up FAILED                [  5%]
tests/api/test_cloud_endpoints.py::test_root_returns_greeting FAILED     [ 11%]
tests/api/test_cloud_endpoints.py::test_predict_is_up FAILED             [ 16%]
tests/api/test_cloud_endpoints.py::test_predict_is_dict FAILED           [ 22%]
tests/api/test_cloud_endpoints.py::test_predict_has_key PASSED           [ 27%]
tests/api/test_cloud_endpoints.py::test_cloud_api_predict PASSED         [ 33%]
tests/api/test_docker_endpoints.py::test_root_is_up PASSED               [ 38%]
tests/api/test_docker_endpoints.py::test_root_returns_greeting PASSED    [ 44%]
tests/api/test_docker_endpoints.py::test_predict_is_up PASSED            [ 50%]
tests/api/test_docker_endpoints.py::test_predict_is_dict PASSED          [ 55%]
tests/api/test_docker_endpoints.py::test_predict_has_key PASSED          [ 61%]
tests/api/test_docker_endpoints.py::test_cloud_api_predict PASSED        [ 66%]
tests/api/test_endpoints.py::test_root_is_up PASSED                      [ 72%]
tests/api/test_endpoints.py::test_root_returns_greeting PASSED           [ 77%]
tests/api/test_endpoints.py::test_predict_is_up PASSED                   [ 83%]
tests/api/test_endpoints.py::test_predict_is_dict PASSED                 [ 88%]
tests/api/test_endpoints.py::test_predict_has_key PASSED                 [ 94%]
tests/api/test_endpoints.py::test_predict_val_is_float PASSED            [100%]

=================================== FAILURES ===================================
_______________________________ test_root_is_up ________________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:217: in _receive_event
    data = await self._network_stream.read(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_backends/anyio.py:32: in read
    with map_exceptions(exc_map):
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
>                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_root_is_up():
        assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/")

tests/api/test_cloud_endpoints.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: ReadTimeout
__________________________ test_root_returns_greeting __________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:217: in _receive_event
    data = await self._network_stream.read(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_backends/anyio.py:32: in read
    with map_exceptions(exc_map):
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
>                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_root_returns_greeting():
        assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/")

tests/api/test_cloud_endpoints.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: ReadTimeout
______________________________ test_predict_is_up ______________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:217: in _receive_event
    data = await self._network_stream.read(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_backends/anyio.py:32: in read
    with map_exceptions(exc_map):
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
>                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_predict_is_up():
        assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_cloud_endpoints.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: ReadTimeout
_____________________________ test_predict_is_dict _____________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:217: in _receive_event
    data = await self._network_stream.read(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_backends/anyio.py:32: in read
    with map_exceptions(exc_map):
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
>                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_predict_is_dict():
        assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_cloud_endpoints.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/root/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.ReadTimeout

/root/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: ReadTimeout
=========================== short test summary info ============================
FAILED tests/api/test_cloud_endpoints.py::test_root_is_up - httpx.ReadTimeout
FAILED tests/api/test_cloud_endpoints.py::test_root_returns_greeting - httpx....
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_up - httpx.ReadTimeout
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_dict - httpx.ReadTi...
============= 4 failed, 14 passed, 10 warnings in 65.43s (0:01:05) =============
